import { JSONSchema7 } from "json-schema";
import { EkoDialogue } from "../dialogue";
import Context from "../context";
import { sub } from "../../common/utils";
import { TOOL_NAME as task_planner } from "./task_planner";
import { DialogueTool, EkoResult, ToolResult } from "../../types";

export const TOOL_NAME = "executeTask";

export default class ExecuteTaskTool implements DialogueTool {
    readonly name: string = TOOL_NAME;
    readonly description: string;
    readonly parameters: JSONSchema7;
    private ekoDialogue: EkoDialogue;

    constructor(ekoDialogue : EkoDialogue) {
        this.description = `Responsible for executing the task plan generated by the ${task_planner}. Use this tool if you need to execute planned tasks.`;
        this.parameters = {
            type: "object",
            properties: {
                taskId: {
                  type: "string",
                  description: `Task ID, generated by the \`${task_planner}\` tool.`,
                },
              },
              required : ["taskId"],
        }
        this.ekoDialogue = ekoDialogue;
    }

    async excecute(args : Record<string,unknown>) : Promise<ToolResult> {
        const taskId = args.taskId as string;
        const eko = this.ekoDialogue.getEko(taskId);
        if(!eko){
            return {
                content : [
                    {
                        type : "text",
                        text: "Error: Task ID not found.",
                    },
                ],
            };
        }
        const result = await eko.execute(taskId);
        const context = eko.getTask(taskId);
        const variables = context?.variables;
        if(variables){
            for(const key of variables.keys()){
                this.ekoDialogue.getGlobalContext().set(key,variables.get(key));
            }
        }
        if(context){
            return this.getTaskResult(context,result);
        } else {
            return {
                content : [
                    {
                        type: "text",
                        text: result.result,
                      },
                ]
            };
        }
    }

    private getTaskResult(context: Context, ekoResult: EkoResult) :  ToolResult {
        let result =
        "# Task execution result\n" + JSON.stringify(ekoResult, null, 2);
        if(context.chain.agents.length > 1){
            result += "\n\n## Subtask execution results";
            for(let i = 0;i<context.chain.agents.length;i++){
                let agentChain = context.chain.agents[i];
                if(agentChain.agentResult){
                    const task = agentChain.agent.task || agentChain.agent.name;
                    result += `\n### ${task}\n${sub(agentChain.agentResult, 800, true)}`;
                }
            }
        }
        return {
            content: [
                {
                  type: "text",
                  text: result,
                },
              ],
        }
    }
}
export {ExecuteTaskTool as  DeepActionTool};